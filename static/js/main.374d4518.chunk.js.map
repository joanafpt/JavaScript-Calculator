{"version":3,"sources":["functions/functions.js","components/Button.js","components/Display.js","components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["functions","calculate","previousValue","operator","displayedValue","result","parseFloat","Button","props","type","className","onClick","children","Display","Calculator","useState","setDisplayedValue","setPreviousValue","setOperator","nextNumberWillCleanDisplayValue","setNextNumberWillCleanDisplayValue","setLastKeyIsDigit","lastKeyIsOperator","setLastKeyIsOperator","handleNumbers","event","persist","num","target","innerHTML","String","handleOps","signJustPressed","resultTemporario","valuesRows","value","function","substr","length","charAt","indexOf","classN","inp","calculatedValue","map","values","buttons","elem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.374d4518.chunk.js","sourcesContent":["export const calculate = (previousValue, operator, displayedValue) => {\r\n    let result = 0;\r\n    if (operator === \"+\") {\r\n        result = parseFloat(previousValue) + parseFloat(displayedValue);\r\n    } else if (operator === \"-\") {\r\n        result = parseFloat(previousValue) - parseFloat(displayedValue);\r\n    } else if (operator === \"*\") {\r\n        result = parseFloat(previousValue) * parseFloat(displayedValue);\r\n    } else if (operator === \"/\") {\r\n        result = parseFloat(previousValue) / parseFloat(displayedValue);\r\n    }\r\n    return result;\r\n};\r\n\r\n\r\n//calculate('5','*','2');\r\n\r\nconst functions = {\r\n    calculate: calculate,\r\n}\r\n\r\n\r\nexport default functions;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n    //console.log(props);\r\n    return (\r\n        <button type=\"submit\"\r\n            className={props.className}\r\n            onClick={props.onClick}\r\n\r\n        >{props.children}\r\n        </button>\r\n    )\r\n}\r\nexport default Button;","import React from 'react';\r\nimport './Display.css';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className=\"row calculator-display\">\r\n            <div className=\"display-digits\">{props.children}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Display;","import React, { useState } from 'react';\r\nimport './Calculator.css';\r\nimport functions from '../functions/functions';\r\nimport Button from './Button';\r\nimport Display from './Display';\r\n\r\nconst Calculator = () => {\r\n    const [displayedValue, setDisplayedValue] = useState('0');\r\n    const [previousValue, setPreviousValue] = useState(null);\r\n    const [operator, setOperator] = useState(null);\r\n    const [nextNumberWillCleanDisplayValue, setNextNumberWillCleanDisplayValue] = useState(false);\r\n    const [lastKeyIsDigit, setLastKeyIsDigit] = useState(true);\r\n    const [lastKeyIsOperator, setLastKeyIsOperator] = useState(false);\r\n\r\n    const togglePositiveNegativeNumbers = () => {\r\n        if (displayedValue.charAt(0) === \"-\") {\r\n            setDisplayedValue(displayedValue.substr(1));\r\n        } else {\r\n            setDisplayedValue(\"-\" + displayedValue);\r\n        }\r\n    }\r\n\r\n    const handleDecimal = () => {\r\n        if (displayedValue.indexOf(\".\") === -1) {\r\n            setDisplayedValue(displayedValue + \".\");\r\n            setNextNumberWillCleanDisplayValue(false);\r\n            setLastKeyIsOperator(false);\r\n            setLastKeyIsDigit(true);\r\n        }\r\n    }\r\n\r\n    const handleClearButton = () => {\r\n        setPreviousValue(null);\r\n        setDisplayedValue('0');\r\n        setOperator(null);\r\n        setNextNumberWillCleanDisplayValue(false);\r\n        setLastKeyIsDigit(true);\r\n        setLastKeyIsOperator(false);\r\n    }\r\n\r\n    const handleCEButton = () => {\r\n        setDisplayedValue(displayedValue.substr(0, displayedValue.length - 1));\r\n        setLastKeyIsOperator(false);\r\n    }\r\n\r\n    const handleNumbers = (event) => {\r\n        event.persist();\r\n        const num = event.target.innerHTML;\r\n        if (nextNumberWillCleanDisplayValue) {\r\n            setDisplayedValue(String(num));\r\n            setNextNumberWillCleanDisplayValue(false);\r\n            setLastKeyIsDigit(true);\r\n            setLastKeyIsOperator(false);\r\n        } else {\r\n            displayedValue === \"0\" ? setDisplayedValue(String(num)) : setDisplayedValue(displayedValue + String(num));\r\n            setLastKeyIsDigit(true);\r\n            setLastKeyIsOperator(false);\r\n        }\r\n    }\r\n\r\n    const handleOps = (event) => {\r\n        event.persist();\r\n        const signJustPressed = event.target.innerHTML;\r\n        let resultTemporario = 0;\r\n        if (previousValue && operator) {\r\n            if (lastKeyIsOperator && signJustPressed !== \"-\") {\r\n                setOperator(signJustPressed);\r\n                setNextNumberWillCleanDisplayValue(true);\r\n                setLastKeyIsOperator(true);\r\n                setLastKeyIsDigit(false);\r\n            }\r\n        }\r\n        if (previousValue && operator) {\r\n            if (lastKeyIsOperator && signJustPressed === \"-\") {\r\n                setDisplayedValue(\"-\");\r\n                setNextNumberWillCleanDisplayValue(false);\r\n                setLastKeyIsOperator(true);\r\n                setLastKeyIsDigit(false);\r\n            }\r\n            else if (displayedValue !== '-' && !lastKeyIsOperator) {\r\n                resultTemporario = functions.calculate(previousValue, operator, displayedValue);\r\n                setPreviousValue(resultTemporario);\r\n                setDisplayedValue(resultTemporario);\r\n                setOperator(signJustPressed);\r\n                setNextNumberWillCleanDisplayValue(true);\r\n                setLastKeyIsDigit(false);\r\n                setLastKeyIsOperator(true);\r\n            }\r\n        }\r\n        else {\r\n            setPreviousValue(displayedValue);\r\n            setOperator(signJustPressed);\r\n            setNextNumberWillCleanDisplayValue(true);\r\n            setLastKeyIsDigit(false);\r\n        }\r\n    }\r\n\r\n    const handleEquals = (event) => {\r\n        event.persist();\r\n        const inp = displayedValue;\r\n        if (previousValue) {\r\n            if (operator) {\r\n                const calculatedValue = functions.calculate(previousValue, operator, inp);\r\n                setDisplayedValue(String(calculatedValue));\r\n                setPreviousValue(null);\r\n                setOperator(null);\r\n                setNextNumberWillCleanDisplayValue(true);\r\n                setLastKeyIsOperator(false);\r\n            }\r\n        } else {\r\n            setPreviousValue(displayedValue);\r\n            setLastKeyIsDigit(true);\r\n            setLastKeyIsOperator(false);\r\n        }\r\n    }\r\n\r\n    const valuesRows = [[{ value: 'AC', function: handleClearButton }, { value: 'CE', function: handleCEButton }, { value: '+-', function: togglePositiveNegativeNumbers }, { value: '/', function: handleOps }], [{ value: '7', function: handleNumbers }, { value: '8', function: handleNumbers }, { value: '9', function: handleNumbers }, { value: '*', function: handleOps }], [{ value: '4', function: handleNumbers }, { value: '5', function: handleNumbers }, { value: '6', function: handleNumbers }, { value: '-', function: handleOps }], [{ value: '1', function: handleNumbers }, { value: '2', function: handleNumbers }, { value: '3', function: handleNumbers }, { value: '+', function: handleOps }], [{ value: '0', function: handleNumbers }, { value: '.', function: handleDecimal }, { value: '=', classN: \"double-key\", function: handleEquals }]];\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm colu1\">\r\n                <Display>{displayedValue}</Display>\r\n                <div className=\"calculator\">\r\n                    {valuesRows.map(function (values) {\r\n                        const buttons = values.map(function (elem) {\r\n                            const classN = elem.classN || \"\";\r\n                            return (\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    onClick={elem.function}\r\n                                    className={`btn btn-light btn-lg key ${classN}`}>\r\n                                    {elem.value}\r\n                                </Button>\r\n                            )\r\n                        });\r\n                        return (<div className=\"row\">{buttons}</div>);\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Calculator;\r\n\r\n","import Calculator from './components/Calculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}